{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"Pasos4Capas": {
		"prefix": "genpasos",
		"body": [
		  "genmigrationadd",
		  "genmigrationupdate",
		  "*Migraciones Migrations/Data/Persistence",
		  "dotnet ef migrations add InitialCreate -p Persistence -s ProductionApi -o Data/Migrations",
		  "",
		  "dotnet ef database update -p Persistence -s API",
		  "",
		  "genwatchrun",
		  "*Swagger UI",
		  "dotnet watch run -p API",
		  "",
		  "genpaquetes4capas",
		  "1.Creacion Proyecto 4 Capas,Crear Solucion Principal y agregar Soluciones ,",
		  "para cada implementacion API,Application,Domain,Persistence,,",
		  "Agregar referencias entre implementaciones y Finalmente descargar los,",
		  "paquetes a cada implementacion correspondiente si necesita.,",
		  "-dotnet new sln,dotnet sln add API,dotnet sln list;,",
		  "-dotnet new webapi -o API,dotnet new classlib -o Application;,",
		  "-dotnet add reference ../Application;",
		  "",
		  "genconexionbd",
		  "genconexionjwt",
		  "2.Conexion Base de Datos y Conexion JWT,appsettings.json-appsettings.Development.json,",
		  "/API. ",
		  "",
		  "gendbcontext",
		  "3.Crear ArchivoDbContext/Data/Persistence.",
		  "",
		  "geninyeccion1",
		  "4.Agregar la primera inyeccion de ArchivoDbContext al Contenedor,",
		  "de Dependencias Program/API.",
		  "",
		  "genbaseentity",
		  "generefreshtoken",
		  "generol",
		  "geneuser",
		  "geneuserrol",
		  "5.Generar Entities con Atributos,Definir RefreshToken,Rol,User,UserRol Entities/Domain.,",
		  "",
		  "gencardunouno",
		  "gencardunomuchos",
		  "gencardmuchosmuchos",
		  "genrefnavegacion",
		  "gencollectnavegacion",
		  "genlistnavegacion",
		  "6.Establecer Relaciones o Cardinalidad entre Entidades Entities/Domain.",
		  "",
		  "7.Definir DbSet,Definir para RefreshToken,Rol,User,UserRol en ArchivoContext/Data/Persistence.",
		  "",
		  "genentityconfiguration",
		  "genhaskeyconfiguration",
		  "gentotableconfiguration",
		  "genstringpropertyconfiguration",
		  "genintpropertyconfiguration",
		  "gendatetimepropertyconfiguration",
		  "gendoublepropertyconfiguration",
		  "genuniqueconfiguration",
		  "genhasone-withoneconfiguration",
		  "genhasone-withmanyconfiguration",
		  "genhasmany-withmanyconfiguration",
		  "genclavescompuestas",
		  "gencrefreshtoken",
		  "gencrol",
		  "gencuser",
		  "8.Crear las configuraciones para cada Entidad,Definir para RefreshToken,Rol,User y Servicio en",
		  "EntityConfiguration/Configuration/Persistence.",
		  "",
		  "genentitydto",
		  "genaddroledto",
		  "gendatauserdto",
		  "genlogindto",
		  "genregisterdto",
		  "9.Definir Dtos para mostrar valores de la Data,Definir AddRoleDto,DataUserDto,LoginDto,RegisterDto EntityDto/Dtos/API.",
		  "",
		  "genmappingprofiles",
		  "10.Definir MappingProfiles para mapear y relacionar los Dtos con cada",
		  "Entidad MappingProfiles/Profiles/API.",
		  "",
		  "genapplicationserviceextension",
		  "genaddjwtextensions",
		  "geninyeccion2",
		  "11.Definir Metodos de Extension e inyectar por segunda vez al",
		  "Contenedor de Dependencias ApplicationServiceExtension/Extensions/API ",
		  ", Program/API.",
		  "",
		  "genigenericrepository",
		  "geniuser",
		  "genientityrepository",
		  "12.Definir Interfaces para cada Entidad,Definir IRefreshToken,IRol,IUser,Definir IGenericRepository ",
		  "IGenericRepository,IEntityRepository/Interfaces/Domain.",
		  "",
		  "gengenericrepository",
		  "genuserrepository",
		  "genentityrepository",
		  "13.Definir Repositorios para cada Interface/Entidad,",
		  "Definir RefreshTokeRepository,RolRepository,UserRepository, Definir GenericRepository ",
		  "GenericRepository,EntityRepository/Repositories/Application.",
		  "",
		  "genunitofwork",
		  "geniunitofwork",
		  "14.Definir IUnitOfWork y UnitOfWork IUnitOfWork/Interfaces/Domain , ",
		  "UnitOfWork/UnitOfWork/Application. ,Definir User,Rol,RefreshToken como Interfaces y Repositorios",
		  "",
		  "genapplicationservices",
		  "geninyeccion3",
		  "15.Agregar Metodo de Extension,Agrega la UnitOfWork al Scope de EF",
		  "ApplicationService/Extensions/API.",
		  "",
		  "genbasecontroller",
		  "genusercontroller",
		  "genentitycontroller",
		  "16.Generar Controladores,Definir UserController,Definir BaseController ",
		  "EntityController,BaseController/Controllers/API.",
		  "",
		  "genpager",
		  "genparams",
		  "genjwthelpers",
		  "genauthorization",
		  "17,Generar Helpers ,Pager,Params,Jwt y Authorization ,Metodos de Paginacion y JWT Pager,Params/Helpers/API.",
		  "",
		  "geniuserservice",
		  "genuserservice",
		  "18.Generar Servicios, Generar IUserService,UserService/Services/API."
		],
		"description": "Pasos4Capas"
	  },
	"Paquetes4Capas": {
		"prefix": "genpaquetes4capas",
		"body": [
		  "Referencias entre Proyectos",
		  "API ---> Aplication --> Domain <- Persistence",
		  "",
		  "API ---> Aplication",
		  "Aplication --> Domain , Persistence",
		  "Persistence -> Domain",
		  "",
		  "Paquetes WebApi",
		  "dotnet add package AspNetCoreRateLimit --version 5.0.0",
		  "dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 12.0.1",
		  "dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 7.0.11",
		  "dotnet add package Microsoft.AspNetCore.Mvc.Versioning --version 5.1.0",
		  "dotnet add package Microsoft.AspNetCore.OpenApi --version 7.0.11",
		  "dotnet add package Microsoft.EntityFrameworkCore.Design --version 7.0.11",
		  "dotnet add package System.IdentityModel.Tokens.Jwt --version 6.32.3",
		  "",
		  "Paquetes Domain",
		  "dotnet add package FluentValidation.AspNetCore --version 11.3.0",
		  "dotnet add package itext7.pdfhtml --version 5.0.1",
		  "dotnet add package Microsoft.EntityFrameworkCore --version 7.0.11",
		  "",
		  "Paquetes Persistence",
		  "dotnet add package Microsoft.EntityFrameworkCore --version 7.0.11",
		  "dotnet add package Pomelo.EntityFrameworkCore.MySql --version 7.0.0",
		  "",
		  "",
		  ""
		],
		"description": "Project4Capas"
	  },
	  "ConexionBaseDatos Program/API": {
		"prefix": "genconexionbd",
		"body": [
		  "\"ConnectionStrings\": {",
		  "    \"ConexSqlServer\": \"Data Source=localhost\\\\sqlexpress;Initial Catalog=dB;Integrate Security=True\",",
		  "    \"MySqlConex\": \"server=localhost;user=root;password=123456;database=pharmacy;\"",
		  "  }"
		],
		"description": "ConexionBaseDatos"
	  },
	  "ConexionJWT Program/API": {
		"prefix": "genconexionjwt",
		"body": [
		  "\"JWT\": {",
		  "    \"Key\": \"3x5tWHaX8DLhQZ%n#hpiscBkVm^Ycc4CkaWKQrDLBzNjgySDz2qJuQE&NQPVarGWquUncC^BKUbiS9j4!tVUv#Us\",",
		  "    \"Issuer\": \"ServidorDeApi\",",
		  "    \"Audience\": \"AppExternas\",",
		  "    \"DurationInMinutes\": 1",
		  "    }"
		],
		"description": "ConexionJWT Program/API"
	  },
	  "DbContext/Data/Persistence": {
		"prefix": "gendbcontext",
		"body": [
		  "public class PharmacyContext : DbContext",
		  "    {",
		  "        public PharmacyContext(DbContextOptions options) : base(options) { }",
		  "        public DbSet<AddressPerson> AddressPeople { get; set; }",
		  "        public DbSet<Bill> Bills { get; set; }",
		  "        public DbSet<City> Cities { get; set; }",
		  "        public DbSet<ContactPerson> ContactPeople { get; set; }",
		  "        public DbSet<Country> Countries { get; set; }",
		  "        public DbSet<Department> Departments { get; set; }",
		  "        public DbSet<Inventory> Inventories { get; set; }",
		  "        public DbSet<InventoryManagement> InventoryManagements { get; set; }",
		  "        public DbSet<MovementDetail> MovementDetails { get; set; }",
		  "        public DbSet<Person> People { get; set; }",
		  "        public DbSet<Product> Products { get; set; }",
		  "        public DbSet<ProductBrand> ProductBrands { get; set; }",
		  "        public DbSet<PurchaseMethod> PurchaseMethods { get; set; }",
		  "        public DbSet<PersonRole> PeopleRoles { get; set; }",
		  "        public DbSet<ContactType> ContactTypes { get; set; }",
		  "        public DbSet<DocumentType> DocumentTypes { get; set; }",
		  "        public DbSet<MovementType> MovementsTypes { get; set; }",
		  "        public DbSet<PersonType> PeopleTypes { get; set; }",
		  "        public DbSet<PresentationType> PresentationTypes { get; set; }",
		  "        public DbSet<Rol> Rols { get; set; }",
		  "        public DbSet<User> Users { get; set; }",
		  "        ",
		  "",
		  "        ",
		  "        protected override void OnModelCreating(ModelBuilder modelBuilder)",
		  "        {",
		  "            base.OnModelCreating(modelBuilder);",
		  "            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());",
		  "        }",
		  "    }"
		],
		"description": "DbContext/Data/Persistence"
	  },
	  "Inyeccion1 Program/API": {
		"prefix": "geninyeccion1",
		"body": [
		  "//builder.Services.AddSwaggerGen();",
		  "builder.Services.AddDbContext<NotiContext>(options =>",
		  "{",
		  "    string connectionString = builder.Configuration.GetConnectionString(\"MySqlConex\");",
		  "    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));",
		  "});",
		  "//var app = builder.Build();"
		],
		"description": "Inyeccion1 Program/API"
	  },
	  "Entities/Domain": {
		"prefix": "genbaseentity",
		"body": [
		  "public class BaseEntity",
		  "    {",
		  "        public int Id { get; set; }",
		  "    }"
		],
		"description": "Entities/Domain"
	  },
	  "CardUnoUno Entities/Domain": {
		"prefix": "gencardunouno",
		"body": [
		  "// Principal (parent)",
		  "public class Blog",
		  "{",
		  "    public int Id { get; set; }",
		  "    public BlogHeader? Header { get; set; } // Reference navigation to dependent",
		  "}",
		  "",
		  "// Dependent (child)",
		  "public class BlogHeader",
		  "{",
		  "    public int Id { get; set; }",
		  "    public Blog? Blog { get; set; } // Optional reference navigation to principal",
		  "}"
		],
		"description": "CardinalidadUnoaUno Entities/Domain"
	  },
	  "CardUnoMuchos Entities/Domain": {
		"prefix": "gencardunomuchos",
		"body": [
		  "// Principal (parent)",
		  "public class Blog",
		  "{",
		  "    public int Id { get; set; }",
		  "    public ICollection<Post> Posts { get; set; } // Collection navigation containing dependents",
		  "}",
		  "",
		  "// Dependent (child)",
		  "public class Post",
		  "{",
		  "    public int Id { get; set; }",
		  "    public int? BlogId { get; set; } // Optional foreign key property",
		  "    public Blog? Blog { get; set; } // Optional reference navigation to principal",
		  "}"
		],
		"description": "CardinalidadUnoaMuchos Entities/Domain"
	  },
	  "CardMuchosaMuchos Entities/Domain": {
		"prefix": "gencardmuchosmuchos",
		"body": [
		  "public class Post",
		  "{",
		  "    public int Id { get; set; }",
		  "    public List<Tag> Tags { get; set; } ",
		  "}",
		  "",
		  "public class Tag",
		  "{",
		  "    public int Id { get; set; }",
		  "    public List<Post> Posts { get; set; } ",
		  "}"
		],
		"description": "CardinalidadMuchosaMuchos Entities/Domain"
	  },
	  "RefNavegacion Entities/Domain": {
		"prefix": "genrefnavegacion",
		"body": [
		  "public Blog Blogs { get; set; }"
		],
		"description": "RefNavegacion Entities/Domain"
	  },
	  "CollectNavegacion Entities/Domain": {
		"prefix": "gencollectnavegacion",
		"body": [
		  "public ICollection<Post> Posts { get; set; }"
		],
		"description": "CollectNavegacion Entities/Domain"
	  },
	  "ListNavegacion Entities/Domain": {
		"prefix": "genlistnavegacion",
		"body": [
		  "public List<Post> Posts { get; set; }"
		],
		"description": "ListNavegacion Entities/Domain"
	  },
	  "EntityConfiguration/Data/Persistence": {
		"prefix": "genentityconfiguration",
		"body": [
		  "public class   EntityConfiguration : IEntityTypeConfiguration<Entity>",
		  "    {",
		  "        public void Configure(EntityTypeBuilder<Entity> builder)",
		  "        {",
		  "            builder.HasKey(e => e.Id).HasName(\"PRIMARY\");",
		  "",
		  "            builder.HasKey(e => new {e.Id1,e.Id2});",
		  "",
		  "            builder.ToTable(\"Entity\");",
		  "",
		  "            builder.Property(e => e.DatosString)",
		  "                .IsRequired()",
		  "                .HasMaxLength(50)",
		  "                .HasColumnType(\"string\")",
		  "                .HasColumnName(\"DatosString\");",
		  "          ",
		  "            builder.Property(e => e.DatosInt)",
		  "                .IsRequired()",
		  "                .HasColumnType(\"int\")",
		  "                .HasColumnName(\"DatosInt\");",
		  "",
		  "            builder.Property(e => e.DatosDateTime)",
		  "                .IsRequired()",
		  "                .HasColumnType(\"datetime\")",
		  "                .HasColumnName(\"DatosDateTime\");",
		  "            ",
		  "            builder.Property(e => e.DatosDouble)",
		  "                .IsRequired()",
		  "                .HasColumnType(\"double\")",
		  "                .HasColumnName(\"DatosDouble\");",
		  "",
		  "            builder.HasIndex(e => e.Id)",
		  "                .IsUnique();",
		  "",
		  "            builder.HasOne(e => e.Entitiesx)",
		  "            .WithOne(e => e.Entitiesy)",
		  "            .HasForeignKey<Entitiesy>(e => e.IdEntityx);",
		  "",
		  "            builder.HasOne(e => e.Entitiesx)",
		  "            .WithMany(e => e.Entitiesy)",
		  "            .HasForeignKey(e => e.IdEntityx);",
		  "",
		  "            builder.HasMany(e => e.Entitiesx)",
		  "            .WithMany(e => e.Entitiesy)",
		  "            .HasForeignKey(e => e.IdEntityx);",
		  "",
		  "            ",
		  "        }",
		  "    }"
		],
		"description": "EntityConfiguration/Data/Persistence"
	  },
	  "HasKeyConfiguration": {
		"prefix": "genhaskeyconfiguration",
		"body": [
		  "builder.HasKey(e => e.Id).HasName(\"PRIMARY\");"
		],
		"description": "HasKeyConfiguration"
	  },
	  "ClavesCompuestasConfiguration": {
		"prefix": "genclavescompuestasconfiguration",
		"body": [
		  "builder.HasKey(e => new {e.Id1,e.Id2});"
		],
		"description": "ClavesCompuestasConfiguration"
	  },
	  "ToTableConfiguration": {
		"prefix": "gentotableconfiguration",
		"body": [
		  "builder.ToTable(\"Entity\");"
		],
		"description": "ToTableConfiguration"
	  },
	  "StringPropertyConfiguration": {
		"prefix": "genstringpropertyconfiguration",
		"body": [
		  "builder.Property(e => e.DatosString)",
		  "                .IsRequired()",
		  "                .HasMaxLength(50)",
		  "                .HasColumnType(\"string\")",
		  "                .HasColumnName(\"DatosString\");"
		],
		"description": "StringPropertyConfiguration"
	  },
	  "IntPropertyConfiguration": {
		"prefix": "genintpropertyconfiguration",
		"body": [
		  "builder.Property(e => e.DatosInt)",
		  "                .IsRequired()",
		  "                .HasColumnType(\"int\")",
		  "                .HasColumnName(\"DatosInt\");"
		],
		"description": "IntPropertyConfiguration"
	  },
	  "DateTimePropertyConfiguration": {
		"prefix": "gendatetimepropertyconfiguration",
		"body": [
		  "builder.Property(e => e.DatosDateTime)",
		  "                .IsRequired()",
		  "                .HasColumnType(\"datetime\")",
		  "                .HasColumnName(\"DatosDateTime\");"
		],
		"description": "DateTimePropertyConfiguration"
	  },
	  "DoublePropertyConfiguration": {
		"prefix": "gendoublepropertyconfiguration",
		"body": [
		  "builder.Property(e => e.DatosDouble)",
		  "                .IsRequired()",
		  "                .HasColumnType(\"double\")",
		  "                ..HasColumnName(\"DatosDouble\");"
		],
		"description": "DoublePropertyConfiguration"
	  },
	  "UniqueConfiguration": {
		"prefix": "genuniqueconfiguration",
		"body": [
		  "builder.HasIndex(e => e.Id)",
		  "     .IsUnique();",
		  "                  "
		],
		"description": "UniqueConfiguration"
	  },
	  "HasOne-WithOneConfiguration": {
		"prefix": "genhasone-withoneconfiguration",
		"body": [
		  "builder.HasOne(e => e.Entitiesx)",
		  "            .WithOne(e => e.Entitiesy)",
		  "            .HasForeignKey<Entityy>(e => e.IdEntityx);"
		],
		"description": "HasOne-WithOneConfiguration"
	  },
	  "HasOne-WithManyConfiguration": {
		"prefix": "genhasone-withmanyconfiguration",
		"body": [
		  "builder.HasOne(e => e.Entitiesx)",
		  "            .WithMany(e => e.Entitiesy)",
		  "            .HasForeignKey(e => e.IdEntityx);"
		],
		"description": "HasOne-WithManyConfiguration"
	  },
	  "HasMany-WithManyConfiguration": {
		"prefix": "genhasmany-withmanyconfiguration",
		"body": [
		  "builder.HasMany(e => e.Entitiesx)",
		  "       .WithMany(e => e.Entitiesy)",
		  "       .HasForeignKey(e => e.IdEntityx);  "
		],
		"description": "HasMany-WithManyConfiguration"
	  },
	  "EntityDto/Dtos/API": {
		"prefix": "genentitydto",
		"body": [
		  "public class EntityDto",
		  "    {",
		  "        public int DatoInt { get; set; }",
		  "        public string DatoString { get; set; }",
		  "        public DateTime DatoDateTime { get; set; }",
		  "        public double DatoDouble{ get; set; }",
		  "    }"
		],
		"description": "EntityDto/Dtos/API"
	  },
	  "MappingProfiles/Profiles/API": {
		"prefix": "genmappingprofiles",
		"body": [
		  "public class MappingProfiles : Profile",
		  "{",
		  "    public MappingProfiles() // Remember adding : Profile in the class",
		  "    {",
		  "        CreateMap<Cita, CitaDto>().ReverseMap();",
		  "",
		  "        CreateMap<Ciudad, CiudadDto>().ReverseMap();",
		  "",
		  "        CreateMap<Cliente, ClienteDto>().ReverseMap();",
		  "",
		  "        CreateMap<ClienteDireccion, ClienteDireccionDto>().ReverseMap();",
		  "",
		  "        CreateMap<ClienteTelefono, ClienteTelefonoDto>().ReverseMap();",
		  "",
		  "        CreateMap<Departamento, DepartamentoDto>().ReverseMap();",
		  "",
		  "        CreateMap<Mascota, MascotaDto>().ReverseMap();",
		  "",
		  "        CreateMap<Pais, PaisDto>().ReverseMap();",
		  "",
		  "        CreateMap<Raza, RazaDto>().ReverseMap();",
		  "",
		  "        CreateMap<Servicio, ServicioDto>().ReverseMap();",
		  "    }",
		  "}"
		],
		"description": "MappingProfiles/Profiles/API"
	  },
	  "ApplicationServiceExtension/Extensions/API": {
		"prefix": "genapplicationserviceextension",
		"body": [
		  "public static class ApplicationServiceExtension",
		  "{",
		  "    public static void ConfigureCors(this IServiceCollection services) => services.AddCors(options =>",
		  "    {",
		  "        options.AddPolicy(\"CorsPolicy\", builder =>",
		  "        {",
		  "            builder.AllowAnyOrigin() // WithOrigins(\"https://domain.com\")",
		  "            .AllowAnyMethod() // WithMethods(\"GET\", \"POST\")",
		  "            .AllowAnyHeader(); // WithHeaders(\"accept\", \"content-type\")",
		  "        });",
		  "    }); // Remember to put 'static' on the class and to add builder.Services.ConfigureCors(); and app.UseCors(\"CorsPolicy\"); to Program.csç",
		  "",
		  "    public static void AddApplicationServices(this IServiceCollection services)",
		  "    {",
		  "        // services.AddScoped<IUnitOfWork, UnitOfWork>();",
		  "    } // Remember to add builder.Services.AddApplicationServices(); to Program.cs",
		  "",
		  "    public static void AddJwt(this IServiceCollection services, IConfiguration configuration)",
		  "    {",
		  "        // Configuration from AppSettings",
		  "        services.Configure<JWT>(configuration.GetSection(\"JWT\"));",
		  "",
		  "        // Adding Authentication -JWT",
		  "        services.AddAuthentication(options =>",
		  "        {",
		  "            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;",
		  "            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;",
		  "        })",
		  "            .AddJwtBearer(o =>",
		  "            {",
		  "                o.RequireHttpsMetadata = false;",
		  "                o.SaveToken = false;",
		  "                o.TokenValidationParameters = new TokenValidationParameters",
		  "                {",
		  "                    ValidateIssuerSigningKey = true,",
		  "                    ValidateIssuer = true,",
		  "                    ValidateAudience = true,",
		  "                    ValidateLifetime = true,",
		  "                    ClockSkew = TimeSpan.Zero,",
		  "                    ValidIssuer = configuration[\"JWT:Issuer\"],",
		  "                    ValidAudience = configuration[\"JWT:Audience\"],",
		  "                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration[\"JWT:Key\"]))",
		  "                };",
		  "            });",
		  "    }",
		  "",
		  "    public static void ConfigureRateLimiting(this IServiceCollection services)",
		  "    {",
		  "        services.AddMemoryCache();",
		  "        services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
		  "        services.AddInMemoryRateLimiting();",
		  "        services.Configure<IpRateLimitOptions>(options =>",
		  "        {",
		  "            options.EnableEndpointRateLimiting = true;",
		  "            options.StackBlockedRequests = false;",
		  "            options.HttpStatusCode = 429;",
		  "            options.RealIpHeader = \"X-Real-IP\";",
		  "            options.GeneralRules = new List<RateLimitRule>",
		  "            {",
		  "                new RateLimitRule",
		  "                {",
		  "                    Endpoint = \"*\",  // Si quiere usar todos ponga *",
		  "                    Period = \"10s\", // Periodo de tiempo para hacer peticiones",
		  "                    Limit = 2         // Numero de peticiones durante el periodo de tiempo",
		  "                }",
		  "            };",
		  "        });",
		  "    } // Remember adding builder.Services.ConfigureRateLimiting(); and builder.Services.AddAutoMapper(Assembly.GetEntryAssembly()); and app.UseIpRateLimiting(); to Program.cs",
		  "}"
		],
		"description": "ApplicationServiceExtension/Extensions/API"
	  },
	  "Inyeccion2 Program/API ": {
		"prefix": "geninyeccion2",
		"body": [
		  "//builder.Services.AddControllers();",
		  "/* Inyeccion de metodos de extension al contenedor de dependencias */",
		  "builder.Services.ConfigureRateLimiting();",
		  "builder.Services.AddAutoMapper(Assembly.GetEntryAssembly());",
		  "builder.Services.ConfigureCors();",
		  "builder.Services.AddApplicationServices(); // Inyeccion de AddApplicationServices",
		  "//builder.Services.AddEndpointsApiExplorer();",
		  "",
		  "",
		  "/*if (app.Environment.IsDevelopment())",
		  "{",
		  "    app.UseSwagger();",
		  "    app.UseSwaggerUI();",
		  "}*/",
		  "",
		  "app.UseCors(\"CorsPolicy\");",
		  "",
		  "app.UseHttpsRedirection();  // Inyeccion completa de los cors",
		  "",
		  "app.UseIpRateLimiting();",
		  "",
		  "//app.UseAuthorization();"
		],
		"description": "Inyeccion2 Program/API "
	  },
	  "IGenericRepository/Interfaces/Domain ": {
		"prefix": "genigenericrepository",
		"body": [
		  "public interface IGenericRepository<T> where T : BaseEntity",
		  "{",
		  "    Task<T> GetByIdAsync(int Id);",
		  "    Task<IEnumerable<T>> GetAllAsync();",
		  "    IEnumerable<T> Find(Expression<Func<T, bool>> expression);",
		  "    Task<(int totalRegistros, IEnumerable<T> registros)> GetAllAsync(int pageIndex, int pageSize, string search);",
		  "    void Add(T entity);",
		  "    void AddRange(IEnumerable<T> entities);",
		  "    void Remove(T entity);",
		  "    void RemoveRange(IEnumerable<T> entities);",
		  "    void Update(T entity);",
		  "}"
		],
		"description": "IGenericRepository/Interfaces/Domain "
	  },
	  "IEntityRepository/Interfaces/Domain ": {
		"prefix": "genientityrepository",
		"body": [
		  "public interface IEntityRepository : IGenericRepository<Entity>",
		  "{",
		  "",
		  "}"
		],
		"description": "IEntityRepository/Interfaces/Domain "
	  },
	  "GenericRepository/Repositories/Application": {
		"prefix": "gengenericrepository",
		"body": [
		  "public class GenericRepository<T> : IGenericRepository<T> where T : BaseEntity",
		  "{",
		  "    private readonly FarmaciaFourLayersContext _context;",
		  "",
		  "    public GenericRepository(FarmaciaFourLayersContext context)",
		  "    {",
		  "        _context = context;",
		  "    }",
		  "",
		  "    public virtual void Add(T entity)",
		  "    {",
		  "        _context.Set<T>().Add(entity);",
		  "    }",
		  "",
		  "    public virtual void AddRange(IEnumerable<T> entities)",
		  "    {",
		  "        _context.Set<T>().AddRange(entities);",
		  "    }",
		  "",
		  "    public virtual IEnumerable<T> Find(Expression<Func<T, bool>> expression)",
		  "    {",
		  "        return _context.Set<T>().Where(expression);",
		  "    }",
		  "",
		  "    public virtual async Task<IEnumerable<T>> GetAllAsync()",
		  "    {",
		  "        return await _context.Set<T>().ToListAsync();",
		  "        // return (IEnumerable<T>) await _context.Entities.FromSqlRaw(\"SELECT * FROM entity\").ToListAsync();",
		  "    }",
		  "",
		  "    public virtual async Task<T> GetByIdAsync(int id)",
		  "    {",
		  "        return await _context.Set<T>().FindAsync(id);",
		  "    }",
		  "",
		  "    public virtual void Remove(T entity)",
		  "    {",
		  "        _context.Set<T>().Remove(entity);",
		  "    }",
		  "",
		  "    public virtual void RemoveRange(IEnumerable<T> entities)",
		  "    {",
		  "        _context.Set<T>().RemoveRange(entities);",
		  "    }",
		  "",
		  "    public virtual void Update(T entity)",
		  "    {",
		  "        _context.Set<T>().Update(entity);",
		  "    }",
		  "    public virtual async Task<(int totalRegistros, IEnumerable<T> registros)> GetAllAsync(",
		  "        int pageIndex,",
		  "        int pageSize,",
		  "        string _search",
		  "    )",
		  "    {",
		  "        var totalRegistros = await _context.Set<T>().CountAsync();",
		  "        var registros = await _context",
		  "            .Set<T>()",
		  "            .Skip((pageIndex - 1) * pageSize)",
		  "            .Take(pageSize)",
		  "            .ToListAsync();",
		  "        return (totalRegistros, registros);",
		  "    }",
		  "}"
		],
		"description": "GenericRepository/Repositories/Application"
	  },
	  "EntityRepository/Repositories/Application": {
		"prefix": "genentityrepository",
		"body": [
		  "public class CiudadRepository : GenericRepository<Ciudad>,ICiudadRepository",
		  "{",
		  "    private readonly FarmaciaFourLayersContext _context;",
		  "",
		  "    public CiudadRepository(FarmaciaFourLayersContext context) : base(context)",
		  "    {",
		  "        _context = context;",
		  "    }",
		  "",
		  "    public override async Task<IEnumerable<Ciudad>> GetAllAsync()",
		  "    {",
		  "        return await _context.Ciudades",
		  "                    .Include(c => c.UbicacionPersonas)",
		  "                    .ToListAsync();",
		  "    }",
		  "",
		  "    public override async Task<(int totalRegistros, IEnumerable<Ciudad> registros)> GetAllAsync(",
		  "        int pageIndex,",
		  "        int pageSize,",
		  "        string search",
		  "    )",
		  "    {",
		  "        var query = _context.Ciudades as IQueryable<Ciudad>;",
		  "    ",
		  "        if (!string.IsNullOrEmpty(search))",
		  "        {",
		  "            query = query.Where(p => p.NombreCiudad.ToLower().Contains(search)); // If necesary add .ToString() after varQuery",
		  "        }",
		  "        query = query.OrderBy(p => p.Id);",
		  "    ",
		  "        var totalRegistros = await query.CountAsync();",
		  "        var registros = await query",
		  "                        .Include(p => p.UbicacionPersonas)",
		  "                        .Skip((pageIndex - 1) * pageSize)",
		  "                        .Take(pageSize)",
		  "                        .ToListAsync();",
		  "        return (totalRegistros, registros);",
		  "    }",
		  "}"
		],
		"description": "EntityRepository/Repositories/Application"
	  },
	  "UnitOfWork/UnitOfWork/Application": {
		"prefix": "genunitofwork",
		"body": [
		  "public class UnitOfWork : IUnitOfWork, IDisposable",
		  "    {",
		  "        private readonly IncidenciasContext _context;",
		  "        private AddressRepository _addresses;",
		  "        public GenreRepository _genres;",
		  "        private CityRepository _cities;",
		  "        private CountryRepository _countries;",
		  "        private CourseRepository _courses;",
		  "        private DepartmentRepository _departments;",
		  "        private PersonRepository _people;",
		  "        private TrainerCourseRepository _trainercourses;",
		  "        private TuitionRepository _tuitions;",
		  "        private TypePersonRepository _typepeople;",
		  "        public IAddressRepository Addresses",
		  "        {",
		  "            get",
		  "            {",
		  "                if (_addresses == null)",
		  "                {",
		  "                    _addresses = new AddressRepository(_context);",
		  "                }",
		  "                return _addresses;",
		  "            }",
		  "        }",
		  "",
		  "        public ICityRepository Cities",
		  "        {",
		  "            get",
		  "            {",
		  "                if (_cities == null)",
		  "                {",
		  "                    _cities = new CityRepository(_context);",
		  "                }",
		  "                return _cities;",
		  "            }",
		  "        }",
		  "",
		  "        public ICountryRepository Countries",
		  "        {",
		  "            get",
		  "            {",
		  "                if (_countries == null)",
		  "                {",
		  "                    _countries = new CountryRepository(_context);",
		  "                }",
		  "                return _countries;",
		  "            }",
		  "        }",
		  "",
		  "        public ICourseRepository Courses",
		  "        {",
		  "            get",
		  "            {",
		  "                if (_courses == null)",
		  "                {",
		  "                    _courses = new CourseRepository(_context);",
		  "                }",
		  "                return _courses;",
		  "            }",
		  "        }",
		  "",
		  "        public IDepartmentRepository Departments",
		  "        {",
		  "            get",
		  "            {",
		  "                if (_departments == null)",
		  "                {",
		  "                    _departments = new DepartmentRepository(_context);",
		  "                }",
		  "                return _departments;",
		  "            }",
		  "        }",
		  "",
		  "        public IPersonRepository People",
		  "        {",
		  "            get",
		  "            {",
		  "                if (_people == null)",
		  "                {",
		  "                    _people = new PersonRepository(_context);",
		  "                }",
		  "                return _people;",
		  "            }",
		  "        }",
		  "",
		  "        public ITrainerCourseRepository TrainerCourses",
		  "        {",
		  "            get",
		  "            {",
		  "                if (_trainercourses == null)",
		  "                {",
		  "                    _trainercourses = new TrainerCourseRepository(_context);",
		  "                }",
		  "                return _trainercourses;",
		  "            }",
		  "        }",
		  "",
		  "        public ITuitionRepository Tuitions",
		  "        {",
		  "            get",
		  "            {",
		  "                if (_tuitions == null)",
		  "                {",
		  "                    _tuitions = new TuitionRepository(_context);",
		  "                }",
		  "                return _tuitions;",
		  "            }",
		  "        }",
		  "",
		  "        public ITypePersonRepository TypePeople",
		  "        {",
		  "            get",
		  "            {",
		  "                if (_typepeople == null)",
		  "                {",
		  "                    _typepeople = new TypePersonRepository(_context);",
		  "                }",
		  "                return _typepeople;",
		  "            }",
		  "        }",
		  "        public IGenreRepository Genres",
		  "        {",
		  "            get",
		  "            {",
		  "                if (_genres == null)",
		  "                {",
		  "                    _genres = new GenreRepository(_context);",
		  "                }",
		  "                return _genres;",
		  "            }",
		  "        }",
		  "",
		  "",
		  "        public UnitOfWork(IncidenciasContext context)",
		  "        {",
		  "            _context = context;",
		  "        }",
		  "",
		  "        public async Task<int> SaveAsync()",
		  "        {",
		  "            return await _context.SaveChangesAsync();",
		  "        }",
		  "",
		  "        public void Dispose()",
		  "        {",
		  "            _context.Dispose();",
		  "        }",
		  "    }"
		],
		"description": "UnitOfWork/UnitOfWork/Application"
	  },
	  "IUnitOfWork/Interfaces/Domain": {
		"prefix": "geniunitofwork",
		"body": [
		  "public interface IUnitOfWork",
		  "{",
		  "    public ICiudadRepository Ciudades { get; }",
		  "    public IContactoPersonaRepository ContactoPersonas { get; }",
		  "    public IDepartamentoRepository Departamentos { get; }",
		  "    public IDetalleMovimientoInventarioRepository DetalleMovimientoInventarios { get; }",
		  "    public IFacturaRepository Facturas { get; }",
		  "    public IFormaPagoRepository FormaPagos { get; }",
		  "    public IInventarioRepository Inventarios { get; }",
		  "    public IMarcaRepository Marcas { get; }",
		  "    public IMovimientoInventarioRepository MovimientoInventarios { get; }",
		  "    public IPaisRepository Paises { get; }",
		  "    public IPersonaRepository Personas { get; }",
		  "    public IPresentacionRepository Presentaciones { get; }",
		  "    public IProductoRepository Productos { get; }",
		  "    public IRolPersonaRepository RolPersonas { get; }",
		  "    public ITipoContactoRepository TipoContactos { get; }",
		  "    public ITipoDocumentoRepository TipoDocumentos { get; }",
		  "    public ITipoMovimientoInventarioRepository TipoMovimientoInventarios { get; }",
		  "    public ITipoPersonaRepository TipoPersonas { get; }",
		  "    public IUbicacionPersonaRepository UbicacionPersonas { get; }",
		  "    public IUserRepository Users { get; }",
		  "    public IRolRepository Rols { get; }",
		  "    public IRefreshTokenRepository RefreshTokens { get; }",
		  "",
		  "    Task<int> SaveAsync();",
		  "}"
		],
		"description": "IUnitOfWork/Interfaces/Domain"
	  },
	  "ApplicationServices/Extensions/API": {
		"prefix": "genapplicationservices",
		"body": [
		  "public static void AddApplicationServices(this IServiceCollection services)",
		  "    {",
		  "        services.AddScoped<IUnitOfWork, UnitOfWork>();",
		  "    } // Remember to add builder.Services.AddApplicationServices(); to Program.cs"
		],
		"description": "ApplicationServices/Extensions/API"
	  },
	  "Inyeccion3 Program/API": {
		"prefix": "geninyeccion3",
		"body": [
		  "//builder.Services.ConfigureCors();",
		  "builder.Services.AddApplicationServices();",
		  "//builder.Services.AddEndpointsApiExplorer();",
		  "//builder.Services.AddSwaggerGen();"
		],
		"description": "Inyeccion3 Program/API"
	  },
	  "EntityController/Controllers/API": {
		"prefix": "genentitycontroller",
		"body": [
		  "public class CityController : BaseController",
		  "    {",
		  "        private readonly IUnitOfWork _unitOfWork;",
		  "        private readonly IMapper _mapper;",
		  "    ",
		  "        public CityController(IUnitOfWork unitOfWork, IMapper mapper)",
		  "        {",
		  "            _unitOfWork = unitOfWork;",
		  "            _mapper = mapper;",
		  "        }",
		  "    ",
		  "        [HttpGet]",
		  "        [ProducesResponseType(StatusCodes.Status200OK)]",
		  "        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "        public async Task<ActionResult<IEnumerable<CityDto>>> Get()",
		  "        {",
		  "            var cities = await _unitOfWork.Cities.GetAllAsync();",
		  "    ",
		  "            //var paises = await _unitOfWork.Paises.GetAllAsync();",
		  "            return _mapper.Map<List<CityDto>>(cities);",
		  "        }",
		  "    ",
		  "        [HttpPost]",
		  "        [ProducesResponseType(StatusCodes.Status201Created)]",
		  "        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "        public async Task<ActionResult<CityDto>> Post(CityDto cityDto)",
		  "        {",
		  "            var city = _mapper.Map<City>(cityDto);",
		  "            this._unitOfWork.Cities.Add(city);",
		  "            await _unitOfWork.SaveAsync();",
		  "            if (city == null)",
		  "            {",
		  "                return BadRequest();",
		  "            }",
		  "            cityDto.Id = city.Id;",
		  "            return CreatedAtAction(nameof(Post), new { id = cityDto.Id }, cityDto);",
		  "        }",
		  "        [HttpGet(\"{id}\")]",
		  "        [ProducesResponseType(StatusCodes.Status200OK)]",
		  "        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
		  "        public async Task<ActionResult<CityDto>> Get(int id)",
		  "        {",
		  "            var city = await _unitOfWork.Cities.GetByIdAsync(id);",
		  "            if (city == null){",
		  "                return NotFound();",
		  "            }",
		  "            return _mapper.Map<CityDto>(city);",
		  "        }",
		  "        [HttpPut(\"{id}\")]",
		  "        [ProducesResponseType(StatusCodes.Status200OK)]",
		  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
		  "        [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "        public async Task<ActionResult<CityDto>> Put(int id, [FromBody] CityDto cityDto)",
		  "        {",
		  "            if (cityDto == null)",
		  "            {",
		  "                return NotFound();",
		  "            }",
		  "            var cities = _mapper.Map<City>(cityDto);",
		  "            _unitOfWork.Cities.Update(cities);",
		  "            await _unitOfWork.SaveAsync();",
		  "            return cityDto;",
		  "        }",
		  "    ",
		  "        [HttpDelete(\"{id}\")]",
		  "        [ProducesResponseType(StatusCodes.Status204NoContent)]",
		  "        [ProducesResponseType(StatusCodes.Status404NotFound)]",
		  "        public async Task<IActionResult> Delete(int id)",
		  "        {",
		  "            var city = await _unitOfWork.Cities.GetByIdAsync(id);",
		  "            if (city == null)",
		  "            {",
		  "                return NotFound();",
		  "            }",
		  "            _unitOfWork.Cities.Remove(city);",
		  "            await _unitOfWork.SaveAsync();",
		  "            return NoContent();",
		  "        }",
		  "    }"
		],
		"description": "EntityController/Controllers/API"
	  },
	  "BaseController/Controllers/API": {
		"prefix": "genbasecontroller",
		"body": [
		  "[ApiController]",
		  "    [Route(\"[controller]\")]",
		  "    public class BaseController : ControllerBase",
		  "    {}"
		],
		"description": "BaseController/Controllers/API"
	  },
	  "Pager/Helpers/API": {
		"prefix": "genpager",
		"body": [
		  "public class Pager<T> where T : class",
		  "{",
		  "    public string Search { get; set; }",
		  "    public int PageIndex { get; set; }",
		  "    public int PageSize { get; set; }",
		  "    public int Total { get; set; }",
		  "    public List<T> Registers { get; private set; }",
		  "",
		  "    public Pager()",
		  "    {",
		  "    }",
		  "",
		  "    public Pager(List<T> registers, int total, int pageIndex, int pageSize, string search)",
		  "    {",
		  "        Registers = registers;",
		  "        Total = total;",
		  "        PageIndex = pageIndex;",
		  "        PageSize = pageSize;",
		  "        Search = search;",
		  "    }",
		  "",
		  "    public int TotalPages",
		  "    {",
		  "        get { return (int)Math.Ceiling(Total / (double)PageSize); }",
		  "        set { this.TotalPages = value; }",
		  "    }",
		  "",
		  "    public bool HasPreviousPage",
		  "    {",
		  "        get { return (PageIndex > 1); }",
		  "        set { this.HasPreviousPage = value; }",
		  "    }",
		  "",
		  "    public bool HasNextPage",
		  "    {",
		  "        get { return (PageIndex < TotalPages); }",
		  "        set { this.HasNextPage = value; }",
		  "    }",
		  "}"
		],
		"description": "Pager/Helpers/API"
	  },
	  "Params/Helpers/API": {
		"prefix": "genparams",
		"body": [
		  "public class Params",
		  "{",
		  "    private int _pageSize = 5;",
		  "    private const int MaxPageSize = 50;",
		  "    private int _pageIndex = 1;",
		  "    private string _search;",
		  "",
		  "    public int PageSize",
		  "    {",
		  "        get => _pageSize;",
		  "        set => _pageSize = (value > MaxPageSize) ? MaxPageSize : value;",
		  "    }",
		  "",
		  "    public int PageIndex",
		  "    {",
		  "        get => _pageIndex;",
		  "        set => _pageIndex = (value <= 0) ? 1 : value;",
		  "    }",
		  "",
		  "    public string Search",
		  "    {",
		  "        get => _search;",
		  "        set => _search = (!String.IsNullOrEmpty(value)) ? value.ToLower() : \"\";",
		  "    }",
		  "}"
		],
		"description": "Params/Helpers/API"
	  },
	  "MigrationsAdd/Data/Persistence": {
		"prefix": "genmigrationadd4",
		"body": [
		  "dotnet ef migrations add InitialCreate -p Persistence -s ProductionApi -o Data/Migrations"
		],
		"description": "MigrationsAdd/Data/Persistence"
	  },
	  "MigrationsUpdate/Data/Persistence": {
		"prefix": "genmigrationupdate4",
		"body": [
		  "dotnet ef database update -p Persistence -s API",
		  ""
		],
		"description": "MigrationsUpdate/Data/Persistence"
	  },
	  "Swagger UI": {
		"prefix": "genwatchrun",
		"body": [
		  "dotnet watch run -p API"
		],
		"description": "Swagger UI"
	  },
	  "RefreshToken/Entities/Domain": {
		"prefix": "generefreshtoken",
		"body": [
		  "public class RefreshToken : BaseEntity",
		  "    {",
		  "    public int UserId { get; set; }",
		  "    public User Usersz { get; set; }",
		  "    public string Token { get; set; }",
		  "    public DateTime Expires { get; set; }",
		  "    public bool IsExpired => DateTime.UtcNow >= Expires;",
		  "    public DateTime Created { get; set; }",
		  "    public DateTime? Revoked { get; set; }",
		  "    public bool IsActive => Revoked == null && !IsExpired;        ",
		  "    }"
		],
		"description": "RefreshToken/Entities/Domain"
	  },
	  "Rol/Entities/Domain": {
		"prefix": "generol",
		"body": [
		  "public class Rol : BaseEntity",
		  "    {",
		  "        public string Name { get; set; }",
		  "        public ICollection<User> Users { get; set; } = new HashSet<User>();",
		  "        public ICollection<UserRol> UsersRols { get; set; }",
		  "    }"
		],
		"description": "Rol/Entities/Domain"
	  },
	  "User/Entities/Domain": {
		"prefix": "geneuser",
		"body": [
		  "public class User : BaseEntity",
		  "    {",
		  "        public string Username { get; set; }",
		  "        public string Email { get; set; }",
		  "        public string Password { get; set; }",
		  "        public ICollection<Rol> Rols { get; set; } = new HashSet<Rol>();",
		  "        public ICollection<RefreshToken> RefreshTokens { get; set; } = new HashSet<RefreshToken>();",
		  "        public ICollection<UserRol> UsersRols { get; set; }",
		  "    }"
		],
		"description": "User/Entities/Domain"
	  },
	  "UserRol/Entities/Domain": {
		"prefix": "geneuserrol",
		"body": [
		  "public class UserRol",
		  "    {",
		  "        public int UserId { get; set; }",
		  "        public User Users { get; set; }",
		  "        public int RolId { get; set; }",
		  "        public Rol Rols { get; set; }",
		  "    }",
		  ""
		],
		"description": "UserRol/Entities/Domain"
	  },
	  "RefreshTokenConfiguration/Configuration/Data/Persistence": {
		"prefix": "gencrefreshtoken",
		"body": [
		  "public class RefreshTokenConfiguration : IEntityTypeConfiguration<RefreshToken>",
		  "    {",
		  "        public void Configure(EntityTypeBuilder<RefreshToken> builder)",
		  "        {",
		  "            builder.ToTable(\"refreshtoken\");",
		  "            ",
		  "            builder.HasOne(x => x.Users).WithMany(x => x.RefreshTokens).HasForeignKey(x => x.IdUserFk);",
		  "        }",
		  "    }",
		  ""
		],
		"description": "RefreshTokenConfiguration/Configuration/Data/Persistence"
	  },
	  "RolConfiguration/Configuration/Data/Persistence": {
		"prefix": "gencrol",
		"body": [
		  "public class RolConfiguration : IEntityTypeConfiguration<Rol>",
		  "    {",
		  "        public void Configure(EntityTypeBuilder<Rol> builder)",
		  "        {",
		  "            builder.ToTable(\"rol\");",
		  "",
		  "            builder.HasKey(x => x.Id);",
		  "            builder.Property(x => x.Id);",
		  "",
		  "            builder.Property(x => x.Name).IsRequired().HasMaxLength(50);",
		  "        }",
		  "    }"
		],
		"description": "RolConfiguration/Configuration/Data/Persistence"
	  },
	  "UserConfiguration/Configuration/Data/Persistence": {
		"prefix": "gencuser",
		"body": [
		  "public class UserConfiguration : IEntityTypeConfiguration<User>",
		  "{",
		  "    public void Configure(EntityTypeBuilder<User> builder)",
		  "    {",
		  "        builder.ToTable(\"user\");",
		  "",
		  "        builder.HasKey(x => x.Id);",
		  "        builder.Property(x => x.Id);",
		  "",
		  "        builder.Property(x => x.Username).IsRequired().HasMaxLength(50);",
		  "",
		  "        builder.Property(x => x.Password).IsRequired().HasMaxLength(225);",
		  "",
		  "        builder.Property(x => x.Email).IsRequired().HasMaxLength(100);",
		  "",
		  "        builder.HasMany(e => e.Rols).WithMany(c => c.Users).UsingEntity<UserRol>(",
		  "            y => y.HasOne(e => e.Rols).WithMany(e => e.UserRols).HasForeignKey(c => c.IdRolFk),",
		  "            y => y.HasOne(e => e.Users).WithMany(e => e.UserRols).HasForeignKey(c => c.IdUserFk),",
		  "            y =>",
		  "            {",
		  "                y.ToTable(\"userrol\");",
		  "                y.HasKey(z => new { z.IdUserFk, z.IdRolFk });",
		  "            }",
		  "        );",
		  "",
		  "        builder.HasMany(x => x.RefreshTokens).WithOne(x => x.Users).HasForeignKey(x => x.IdUserFk);",
		  "    }",
		  "}"
		],
		"description": "UserConfiguration/Configuration/Data/Persistence"
	  },
	  "AddRoleDto/Dtos/API": {
		"prefix": "genaddroledto",
		"body": [
		  "public class AddRoleDto",
		  "    {",
		  "        [Required]",
		  "        public string Username { get; set; }",
		  "        [Required]",
		  "        public string Password { get; set; }",
		  "        [Required]",
		  "        public string Role { get; set; }",
		  "    }"
		],
		"description": "AddRoleDto/Dtos/API"
	  },
	  "DataUserDto/Dtos/API": {
		"prefix": "gendatauserdto",
		"body": [
		  "public class DataUserDto",
		  "    {",
		  "        public string Message { get; set; }",
		  "        public bool IsAuthenticated { get; set; }",
		  "        public string UserName { get; set; }",
		  "        public string Email { get; set; }",
		  "        public List<string> Roles { get; set; }",
		  "        public string Token { get; set; }",
		  "",
		  "        [JsonIgnore] // ->this attribute restricts the property to be shown in the result",
		  "        public string RefreshToken { get; set; }",
		  "        public DateTime RefreshTokenExpiration { get; set; }",
		  "    }"
		],
		"description": "DataUserDto/Dtos/API"
	  },
	  "LoginDto/Dtos/API": {
		"prefix": "genlogindto",
		"body": [
		  "public class LoginDto",
		  "    {",
		  "        [Required]",
		  "        public string Username { get; set; }",
		  "        [Required]",
		  "        public string Password { get; set; }",
		  "    }"
		],
		"description": "LoginDto/Dtos/API"
	  },
	  "RegisterDto/Dtos/API": {
		"prefix": "genregisterdto",
		"body": [
		  "public class RegisterDto",
		  "    {",
		  "        [Required]",
		  "        public string Email { get; set; }",
		  "        [Required]",
		  "        public string Username { get; set; }",
		  "        [Required]",
		  "        public string Password { get; set; }",
		  "    }"
		],
		"description": "RegisterDto/Dtos/API"
	  },
	  "AddJwt/Extensions/API": {
		"prefix": "genaddjwtextensions",
		"body": [
		  "public static void AddJwt(this IServiceCollection services, IConfiguration configuration)",
		  "    {",
		  "        // Configuration from AppSettings",
		  "        services.Configure<JWT>(configuration.GetSection(\"JWT\"));",
		  "",
		  "        // Adding Authentication -JWT",
		  "        services.AddAuthentication(options =>",
		  "        {",
		  "            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;",
		  "            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;",
		  "        })",
		  "            .AddJwtBearer(o =>",
		  "            {",
		  "                o.RequireHttpsMetadata = false;",
		  "                o.SaveToken = false;",
		  "                o.TokenValidationParameters = new TokenValidationParameters",
		  "                {",
		  "                    ValidateIssuerSigningKey = true,",
		  "                    ValidateIssuer = true,",
		  "                    ValidateAudience = true,",
		  "                    ValidateLifetime = true,",
		  "                    ClockSkew = TimeSpan.Zero,",
		  "                    ValidIssuer = configuration[\"JWT:Issuer\"],",
		  "                    ValidAudience = configuration[\"JWT:Audience\"],",
		  "                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration[\"JWT:Key\"]))",
		  "                };",
		  "            });",
		  "    }"
		],
		"description": "AddJwt/Extensions/API"
	  },
	  "IUser/Interfaces/Domain": {
		"prefix": "geniuser",
		"body": [
		  "public interface IUser : IGenericRepository<User>",
		  "{",
		  "    Task<User> GetByUsernameAsync(string username);",
		  "    Task<User> GetByRefreshTokenAsync(string username);",
		  "}"
		],
		"description": "IUser/Interfaces/Domain"
	  },
	  "UserRepository/Repositories/Application": {
		"prefix": "genuserrepository",
		"body": [
		  "public class UserRepository : GenericRepository<User>, IUser",
		  "{",
		  "    private readonly VeterinariaContext _context;",
		  "",
		  "    public UserRepository(VeterinariaContext context) : base(context)",
		  "    {",
		  "        _context = context;",
		  "    }",
		  "",
		  "    public async Task<User> GetByRefreshTokenAsync(string refreshToken)",
		  "    {",
		  "        return await _context.Users",
		  "                    .Include(u => u.Rols)",
		  "                    .Include(u => u.RefreshTokens)",
		  "                    .FirstOrDefaultAsync(u => u.RefreshTokens.Any(t => t.Token == refreshToken));",
		  "    }",
		  "",
		  "    public async Task<User> GetByUsernameAsync(string username)",
		  "    {",
		  "        return await _context.Users",
		  "                    .Include(u => u.Rols)",
		  "                    .Include(u => u.RefreshTokens)",
		  "                    .FirstOrDefaultAsync(u => u.Username.ToLower() == username.ToLower());",
		  "    }",
		  "}"
		],
		"description": "UserRepository/Repositories/Application"
	  },
	  "UserController/Controllers/API": {
		"prefix": "genusercontroller",
		"body": [
		  "public class UserController : BaseController",
		  "{",
		  "    private readonly IUserService _userService;",
		  "",
		  "    public UserController(IUserService userService)",
		  "    {",
		  "        _userService = userService;",
		  "    }",
		  "",
		  "    [HttpPost(\"register\")]",
		  "    public async Task<ActionResult> RegisterAsync(RegisterDto model)",
		  "    {",
		  "        var result = await _userService.RegisterAsync(model);",
		  "        return Ok(result);",
		  "    }",
		  "",
		  "    [HttpPost(\"token\")]",
		  "    public async Task<ActionResult> GetTokenAsync(LoginDto model)",
		  "    {",
		  "        var result = await _userService.GetTokenAsync(model);",
		  "        SetRefreshTokenInCookie(result.RefreshToken);",
		  "        return Ok(result);",
		  "    }",
		  "",
		  "    [HttpPost(\"addrol\")]",
		  "    public async Task<ActionResult> AddRolAsync(AddRolDto model)",
		  "    {",
		  "        var result = await _userService.AddRolAsync(model);",
		  "        return Ok(result);",
		  "    }",
		  "",
		  "    [HttpPost(\"refresh-token\")]",
		  "    public async Task<ActionResult> RefreshToken()",
		  "    {",
		  "        var refreshToken = Request.Cookies[\"refreshToken\"];",
		  "        var result = await _userService.RefreshTokenAsync(refreshToken);",
		  "        if (!string.IsNullOrEmpty(result.RefreshToken))",
		  "        {",
		  "            SetRefreshTokenInCookie(result.RefreshToken);",
		  "        }",
		  "        return Ok(result);",
		  "    }",
		  "",
		  "    private void SetRefreshTokenInCookie(string refreshToken)",
		  "    {",
		  "        var cookieOptions = new CookieOptions",
		  "        {",
		  "            HttpOnly = true,",
		  "            Expires = DateTime.UtcNow.AddDays(2),",
		  "        };",
		  "        Response.Cookies.Append(\"refreshToken\", refreshToken, cookieOptions);",
		  "    }",
		  "}"
		],
		"description": "UserController/Controllers/API"
	  },
	  "JWT/Helpers/API": {
		"prefix": "genjwthelpers",
		"body": [
		  "public class JWT",
		  "{",
		  "    public string Key { get; set; }",
		  "    public string Issuer { get; set; }",
		  "    public string Audience { get; set; }",
		  "    public double DurationInMinutes { get; set; }",
		  "}"
		],
		"description": "JWT/Helpers/API"
	  },
	  "Authorization/Helpers/API": {
		"prefix": "genauthorization",
		"body": [
		  "public class Authorization",
		  "    {",
		  "        public enum Roles",
		  "        {",
		  "            Administrator,",
		  "            Manager,",
		  "            Employee,",
		  "            Person",
		  "        }",
		  "",
		  "        public const Roles rol_default = Roles.Person;",
		  "    }"
		],
		"description": "Authorization/Helpers/API"
	  },
	  "IUserService/Services/API": {
		"prefix": "geniuserservice",
		"body": [
		  "public interface IUserService",
		  "{",
		  "    Task<string> RegisterAsync(RegisterDto model);",
		  "    Task<DataUserDto> GetTokenAsync(LoginDto model);",
		  "    Task<string> AddRolAsync(AddRolDto model);",
		  "    Task<DataUserDto> RefreshTokenAsync(string RefreshToken);",
		  "}"
		],
		"description": "IUserService/Services/API"
	  },
	  "UserService/Services/API": {
		"prefix": "genuserservice",
		"body": [
		  "public class UserService : IUserService",
		  "{",
		  "    private readonly JWT _jwt;",
		  "    private readonly IUnitOfWork _unitOfWork;",
		  "    private readonly IPasswordHasher<User> _passwordHasher;",
		  "    public UserService(IUnitOfWork unitOfWork, IOptions<JWT> jwt, IPasswordHasher<User> passwordHasher)",
		  "    {",
		  "        _jwt = jwt.Value;",
		  "        _unitOfWork = unitOfWork;",
		  "        _passwordHasher = passwordHasher;",
		  "    }",
		  "    public async Task<string> RegisterAsync(RegisterDto registerDto)",
		  "    {",
		  "        var user = new User",
		  "        {",
		  "            Email = registerDto.Email,",
		  "            Username = registerDto.Username",
		  "        };",
		  "        user.Password = _passwordHasher.HashPassword(user, registerDto.Password); //Encrypt password",
		  "        var existingUser = _unitOfWork.Users",
		  "                            .Find(u => u.Username.ToLower() == registerDto.Username.ToLower())",
		  "                            .FirstOrDefault();",
		  "        if (existingUser == null)",
		  "        {",
		  "            var rolDefault = _unitOfWork.Rols",
		  "                            .Find(u => u.Name == Authorization.rol_default.ToString())",
		  "                            .First();",
		  "            try",
		  "            {",
		  "                user.Rols.Add(rolDefault);",
		  "                _unitOfWork.Users.Add(user);",
		  "                await _unitOfWork.SaveAsync();",
		  "                return $\"User  {registerDto.Username} has been registered successfully\";",
		  "            }",
		  "            catch (Exception ex)",
		  "            {",
		  "                    var message = ex.Message;",
		  "                    return $\"Error: {message}\";",
		  "            }",
		  "        }",
		  "        else",
		  "        {",
		  "            return $\"User {registerDto.Username} already registered.\";",
		  "        }",
		  "    }",
		  "",
		  "    public async Task<DataUserDto> GetTokenAsync(LoginDto model)",
		  "    {",
		  "        DataUserDto dataUserDto = new DataUserDto();",
		  "        var user = await _unitOfWork.Users.GetByUsernameAsync(model.UserName);",
		  "        if (user == null)",
		  "        {",
		  "            dataUserDto.IsAuthenticated = false;",
		  "            dataUserDto.Message = $\"User does not exist with Username {model.UserName}.\";",
		  "            return dataUserDto;",
		  "        }",
		  "        var result = _passwordHasher.VerifyHashedPassword(user, user.Password, model.Password);",
		  "        if (result == PasswordVerificationResult.Success)",
		  "        {",
		  "            dataUserDto.IsAuthenticated = true;",
		  "            JwtSecurityToken jwtSecurityToken = CreateJwtToken(user);",
		  "            dataUserDto.Token = new JwtSecurityTokenHandler().WriteToken(jwtSecurityToken);",
		  "            dataUserDto.Email = user.Email;",
		  "            dataUserDto.UserName = user.Username;",
		  "            dataUserDto.Rols = user.Rols",
		  "                                .Select(u => u.Name)",
		  "                                .ToList();",
		  "            if (user.RefreshTokens.Any(a => a.IsActive))",
		  "            {",
		  "                var activeRefreshToken = user.RefreshTokens.Where(a => a.IsActive == true).FirstOrDefault();",
		  "                dataUserDto.RefreshToken = activeRefreshToken.Token;",
		  "                dataUserDto.RefreshTokenExpiration = activeRefreshToken.Expires;",
		  "            }",
		  "            else",
		  "            {",
		  "                var refreshToken = CreateRefreshToken();",
		  "                dataUserDto.RefreshToken = refreshToken.Token;",
		  "                dataUserDto.RefreshTokenExpiration = refreshToken.Expires;",
		  "                user.RefreshTokens.Add(refreshToken);",
		  "                _unitOfWork.Users.Update(user);",
		  "                await _unitOfWork.SaveAsync();",
		  "            }",
		  "            return dataUserDto;",
		  "        }",
		  "        dataUserDto.IsAuthenticated = false;",
		  "        dataUserDto.Message = $\"Credenciales incorrectas para el usuario {user.Username}.\";",
		  "        return dataUserDto;",
		  "    }",
		  "",
		  "    public async Task<string> AddRolAsync(AddRolDto model)",
		  "    {",
		  "        var user = await _unitOfWork.Users.GetByUsernameAsync(model.UserName);",
		  "        if (user == null)",
		  "        {",
		  "            return $\"User {model.UserName} does not exists.\";",
		  "        }",
		  "        var result = _passwordHasher.VerifyHashedPassword(user, user.Password, model.Password);",
		  "        if (result == PasswordVerificationResult.Success)",
		  "        {",
		  "            var rolExists = _unitOfWork.Rols",
		  "                            .Find(u => u.Name.ToLower() == model.Rol.ToLower())",
		  "                            .FirstOrDefault();",
		  "            if (rolExists != null)",
		  "            {",
		  "                var userHasRol = user.Rols.Any(u => u.Id == rolExists.Id);",
		  "                if (userHasRol == false)",
		  "                {",
		  "                    user.Rols.Add(rolExists);",
		  "                    _unitOfWork.Users.Update(user);",
		  "                    await _unitOfWork.SaveAsync();",
		  "                }",
		  "                return $\"Rol {model.Rol} added to user {model.UserName} successfully.\";",
		  "            }",
		  "            return $\"Rol {model.Rol} was not found.\";",
		  "        }",
		  "        return $\"Invalid Credentials\";",
		  "    }",
		  "",
		  "    public async Task<DataUserDto> RefreshTokenAsync(string refreshToken)",
		  "    {",
		  "        var dataUserDto = new DataUserDto();",
		  "        var usuario = await _unitOfWork.Users.GetByRefreshTokenAsync(refreshToken);",
		  "        if (usuario == null)",
		  "        {",
		  "            dataUserDto.IsAuthenticated = false;",
		  "            dataUserDto.Message = $\"Token is not assigned to any user.\";",
		  "            return dataUserDto;",
		  "        }",
		  "        var refreshTokenBd = usuario.RefreshTokens.Single(x => x.Token == refreshToken);",
		  "        if (!refreshTokenBd.IsActive)",
		  "        {",
		  "            dataUserDto.IsAuthenticated = false;",
		  "            dataUserDto.Message = $\"Token is not active.\";",
		  "            return dataUserDto;",
		  "        }",
		  "        //Revoque the current refresh token and",
		  "        refreshTokenBd.Revoked = DateTime.UtcNow;",
		  "        //generate a new refresh token and save it in the database",
		  "        var newRefreshToken = CreateRefreshToken();",
		  "        usuario.RefreshTokens.Add(newRefreshToken);",
		  "        _unitOfWork.Users.Update(usuario);",
		  "        await _unitOfWork.SaveAsync();",
		  "        //Generate a new Json Web Token",
		  "        dataUserDto.IsAuthenticated = true;",
		  "        JwtSecurityToken jwtSecurityToken = CreateJwtToken(usuario);",
		  "        dataUserDto.Token = new JwtSecurityTokenHandler().WriteToken(jwtSecurityToken);",
		  "        dataUserDto.Email = usuario.Email;",
		  "        dataUserDto.UserName = usuario.Username;",
		  "        dataUserDto.Rols = usuario.Rols",
		  "                            .Select(u => u.Name)",
		  "                            .ToList();",
		  "        dataUserDto.RefreshToken = newRefreshToken.Token;",
		  "        dataUserDto.RefreshTokenExpiration = newRefreshToken.Expires;",
		  "        return dataUserDto;",
		  "    }",
		  "",
		  "    private RefreshToken CreateRefreshToken()",
		  "    {",
		  "        var randomNumber = new byte[32];",
		  "        using (var generator = RandomNumberGenerator.Create())",
		  "        {",
		  "            generator.GetBytes(randomNumber);",
		  "            return new RefreshToken",
		  "            {",
		  "                Token = Convert.ToBase64String(randomNumber),",
		  "                Expires = DateTime.UtcNow.AddDays(10),",
		  "                Created = DateTime.UtcNow",
		  "            };",
		  "        }",
		  "    }",
		  "",
		  "    private JwtSecurityToken CreateJwtToken(User usuario)",
		  "    {",
		  "        var rols = usuario.Rols;",
		  "        var rolClaims = new List<Claim>();",
		  "        foreach (var rol in rols)",
		  "        {",
		  "            rolClaims.Add(new Claim(\"rols\", rol.Name));",
		  "        }",
		  "        var claims = new[]",
		  "        {",
		  "            new Claim(JwtRegisteredClaimNames.Sub, usuario.Username),",
		  "            new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),",
		  "            new Claim(JwtRegisteredClaimNames.Email, usuario.Email),",
		  "            new Claim(\"uid\", usuario.Id.ToString())",
		  "        }",
		  "        .Union(rolClaims);",
		  "        var symmetricSecurityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwt.Key));",
		  "        var signingCredentials = new SigningCredentials(symmetricSecurityKey, SecurityAlgorithms.HmacSha256);",
		  "        var jwtSecurityToken = new JwtSecurityToken(",
		  "            issuer: _jwt.Issuer,",
		  "            audience: _jwt.Audience,",
		  "            claims: claims,",
		  "            expires: DateTime.UtcNow.AddMinutes(_jwt.DurationInMinutes),",
		  "            signingCredentials: signingCredentials);",
		  "        return jwtSecurityToken;",
		  "    }",
		  "}"
		],
		"description": "UserService/Services/API"
	  },
	  "DbContextScaffold": {
		"prefix": "gendbfirstmigrationscaffold",
		"body": [
		  "dotnet ef dbcontext scaffold \"server=localhost;user=root;password=123456;database=apicampus\" Pomelo.EntityFrameworkCore.MySql -s ApiApolo -p Persistence --context ApoloCampusContext --context-dir Data --output-dir Entities"
		],
		"description": "DbContextScaffold"
	  },
	  "SingularDtoQueryFirstOrDefaultAsync ": {
		"prefix": "gensingularquerydto",
		"body": [
		  "//EntityxDto/Dtos/API",
		  "public class EmpleadoJefeDto",
		  "{",
		    "public string Puesto { get; set; }",
			"public string Nombre { get; set; }",
			"public string Apellido1 { get; set; }",
			"public string Apellido2 { get; set; }",
			"public string Email { get; set; }"
		  "}",
		  "//IEntity/Interfaces/Domain", 
		  "Task<Empleado> GetBoss();",
		  "",
		  "//EntityRepository/Repositories/Application",
		  "public async Task<Empleado> GetBoss()",
		  "        {",
		  "            return await (from emp in _context.Empleados",
		  "                          where emp.Puesto == \"Director General\"",
		  "                          select new Empleado",
		  "                          {",
		  "                            Puesto = emp.Puesto,",
		  "                            Nombre = emp.Nombre,",
		  "                            Apellido1 = emp.Apellido1,",
		  "                            Apellido2 = emp.Apellido2,",
		  "                            Email = emp.Email",
		  "                          }",
		  "            ).FirstOrDefaultAsync();",
		  "        }",
		  "",
		  "//MappingProfiles/Profiles/API",
		  "CreateMap<Empleado, EmpleadoJefeDto>()",
		  ".ReverseMap();",
		  "",
		  "//EntityController/Controllers/API",
		  "[HttpGet(\"DirectorGeneral\")]",
		  "[ProducesResponseType(StatusCodes.Status200OK)]",
		  "[ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "public async Task<ActionResult<EmpleadoJefeDto>> DirectorGeneral()",
		  "{",
		  "  var entity = await _unitOfWork.Empleados.GetBoss();",
		  "  return _mapper.Map<EmpleadoJefeDto>(entity);",
		  " } "
		],
		"description": "SingularDtoQueryFirstOrDefaultAsync "
	  },
	  "PluralEntityQueryIEnumerable ": {
		"prefix": "genpluralqueryentity",
		"body": [
		  "//EntityAndEntity/Queries/Domain",
		  "public class ClientesConPagos",
		  "    {",
		  "        public int CodigoCliente { get; set; }",
		  "        public int ClientePagoFk { get; set; }",
		  "        public string NombreCliente { get; set; }",
		  "        public string NombreRepresentante { get; set; }",
		  "        public string CiudadOficina { get; set; }",
		  "    }",
		  "//IEntity/Interfaces/Domain",
		  "Task<IEnumerable<ClientesConPagos>> GetClientsWithPays();",
		  "",
		  "//EntityRepository/Repositories/Application",
		  "public async Task<IEnumerable<ClientesConPagos>> GetClientsWithPays()",
		  "        {",
		  "            return await (from cli in _context.Clientes",
		  "                         join pays in _context.Pagos",
		  "                         on cli.CodigoCliente equals pays.CodigoCliente",
		  "                         join emp in _context.Empleados",
		  "                         on cli.CodigoEmpleadoRepVentas equals emp.CodigoEmpleado",
		  "                         join of in _context.Oficinas",
		  "                         on emp.CodigoOficina equals of.CodigoOficina",
		  "                        select new ClientesConPagos",
		  "                        {",
		  "                            CodigoCliente = cli.CodigoCliente,",
		  "                            ClientePagoFk = pays.CodigoCliente,",
		  "                            NombreCliente = cli.NombreCliente,",
		  "                            NombreRepresentante = emp.Nombre,",
		  "                            CiudadOficina = of.Ciudad",
		  "                        }",
		  "            ).ToListAsync();",
		  "        }",
		  "",
		  "//EntityController/Controllers/API",
		  "[HttpGet(\"ClientesConPagos\")]",
		  "[ProducesResponseType(StatusCodes.Status200OK)]",
		  "[ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "public async Task<ActionResult<IEnumerable<ClientesConPagos>>> ClientsWithPays()",
		  "{",
		  "  var entity = await _unitOfWork.Clientes.GetClientsWithPays();",
		  "  return _mapper.Map<List<ClientesConPagos>>(entity);",
		  "}",
		  "",
		  "//Recuerde que cada Dto creado se implementa en el MappingProfiles"
		],
		"description": "PluralQueryIEnumerable "
	  },
	  "GetAllQuery": {
		"prefix": "gengetallquery",
		"body": [
		  "public IEnumerable<Orderdetail> GetAll()",
		  "    {",
		  "        return _context.Set<Orderdetail>().ToList();",
		  "    }",
		  "IEnumerable<Orderdetail> GetAll();",
		],
		"description": "GetAllQuery"
	  },
	  "NothingEntityQuery": {
		"prefix": "gennothingquery",
		"body": [
		  "//Entity/Queries/Domain",
		  "public class ProductDontSells",
		  "{",
		  "    public string Code { get; set; }",
		  "    public string Name { get; set; }",
		  "    public string IdProductFk { get; set; }",
		  "    ",
		  "}",
		  "//IEntity/Interfaces/Domain",
		  "Task<IEnumerable<ProductDontSells>> GetProductDontSells();",
		  "",
		  "//EntityRepository/Repositories/Application",
		  "public async Task<IEnumerable<ProductDontSells>> GetProductDontSells()",
		  "    {",
		  "        return await (from pro in _context.Products",
		  "                      join detord in _context.Orderdetails",
		  "                      on pro.Code equals detord.IdProductFk into detordGroup",
		  "                        from detord in detordGroup.DefaultIfEmpty()",
		  "                    where detord == null ",
		  "                      select new ProductDontSells",
		  "                      {",
		  "                        Code = pro.Code,",
		  "                        Name = pro.Name,",
		  "                        IdProductFk = detord.IdProductFk",
		  "                      }",
		  "        ).ToListAsync();",
		  "",
		  "//EntityController/Controllers/API",
		  "[HttpGet(\"ProductDontSells\")]",
		  "[ProducesResponseType(StatusCodes.Status200OK)]",
		  "[ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "public async Task<ActionResult<IEnumerable<ProductDontSells>>> ProductDontSells()",
		  "{",
		  "  var products = await _unitOfWork.Products.GetProductDontSells();",
		  "  return _mapper.Map<List<ProductDontSells>>(products);",
		  "}"
		],
		"description": "NothingEntityQuery"
	  },
	  "ObjctIEnumerableQuery": {
		"prefix": "genobjectienumerablequery",
		"body": [
		  "//EntityDto/Dtos/API",
		  "public class CityOfficeDto",
		  "{",
		  "    public string City { get; set; }",
		  "    public string CodeOffice { get; set; }",
		  "}",
		  "//IEntity/Interfaces/Domain",
		  "Task<IEnumerable<object>> GetAllCityOffices();",
		  "",
		  "//EntityRepository/Repositories/Application",
		  "public async Task<IEnumerable<object>> GetAllCityOffices()",
		  "    {",
		  "        return await (",
		  "            from cit in _context.Cities",
		  "            join adr in _context.Addresses",
		  "            on cit.Id equals adr.IdCityFk",
		  "            join ofi in _context.Offices",
		  "            on adr.Id equals ofi.IdAddressFk",
		  "            select new CityOffice",
		  "            {",
		  "                City = cit.Name,",
		  "                CodeOffice = ofi.Code",
		  "            }",
		  "        ).ToListAsync();",
		  "",
		  "//EntityController/Controllers/API",
		  "[HttpGet(\"CityOffices\")]",
		  "[ProducesResponseType(StatusCodes.Status200OK)]",
		  "[ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "public async Task<ActionResult<IEnumerable<CityOfficeDto>>> CityOffices()",
		  "{",
		  "   var cities = await _unitOfWork.Cities.GetAllCityOffices();",
		  "   return _mapper.Map<List<CityOfficeDto>>(cities);",
		  "}"
		],
		"description": "ObjctIEnumerableQuery"
	  },
	  "ExpresionesLinQ": {
		"prefix": "genexpresioneslinq",
		"body": [
		  "//from in,where,select",
		  "from x in _context.Entities ",
		  "where x.Propiedad == y.Propiedad (condicion,bool) ",
		  "select new Entity  //Select selecciona informacion puntual y escogida por nosotros",
		  "{",
		  "  propiedad1=x.Propiedad1,   //Propiedades que se necesitan para mostrar informacion , funciona casi como un Dto",
		  "  propiedad2=x.Propiedad2",
		  "}",
		  "=> from,de - x,coleccion,lista,objetoEnumerable - in,en,ubicacion - _context,repositorios - Entities,RepositorioEntidad",
		  "",
		  "//join in on,equals",
		  "return await (",
		  "    from cli in _context.Clientes",
		  "    join pays in _context.Pagos on cli.CodigoCliente equals pays.CodigoCliente   //join une las tablas de clientes con pagos,verifica que el codigo cliente coincida en las dos tablas ",
		  "    join emp in _context.Empleados on cli.CodigoEmpleadoRepVentas equals emp.CodigoEmpleado //une las tablas de clientes con empleados,verifica que el codigo del empleado coincida en las dos tablas",
		  "    join of in _context.Oficinas on emp.CodigoOficina equals of.CodigoOficina //une las tablas de empleados con oficinas,verifica que el codigo de las oficinas coincida con el de empleados",
		  "    select new ClientesConPagos",
		  "    {",
		  "        CodigoCliente = cli.CodigoCliente,",
		  "        ClientePagoFk = pays.CodigoCliente,",
		  "        NombreCliente = cli.NombreCliente,",
		  "        NombreRepresentante = emp.Nombre,",
		  "        CiudadOficina = of.Ciudad",
		  "    }",
		  ").ToListAsync();",
		  "",
		  "join,Realiza la operacion de union entre tablas",
		  "equals,compara y verifica igualdad entre codigos,propiedades de las tablas unidas",
		  "select,selecciona de cada tabla la informacion que se necesita mostrar",
		  "ToListAsync(),Convierte los resultados de la consulta en una lista y lo devuelve de manera asyncronica",
		  "",
		  "//orderby ,FirstOrDefaultAsync()",
		  "return await (",
		  "    from pro in _context.Products",
		  "    orderby pro.Price descending //Ordena el precio de manera descendente es decir de mayor a menor",
		  "    select new Product",
		  "    {",
		  "        Name = pro.Name,",
		  "        Price = pro.Price",
		  "    }",
		  ").FirstOrDefaultAsync();",
		  "",
		  "orderby pro.Price ascending // Orden ascendente",
		  "orderby pro.Category, pro.Price descending // Ordena por categoría y luego por precio descendente",
		  "orderby pro.Name.Length // Ordena por la longitud de los nombres",
		  "group pro by pro.Category into grouped",
		  "orderby grouped.Key // Ordena los grupos por la clave (en este caso, la categoría)",
		  "",
		  "orderby,ordena elementos,propiedades de manera descendentes,ascendentes , se puede utilizar varias propiedades en un orderby",
		  "FirstOrDefaultAsync(),obtiene el primer elemento de la secuencia de manera asyncronica ,puede ser null",
		  "",
		  "//group by into",
		  "var productosPorCategoria = from producto in listaDeProductos",
		  "                            group producto by producto.Categoria into grupo",
		  "                            select new",
		  "                            {",
		  "                                Categoria = grupo.Key,",
		  "                                Productos = grupo.ToList()",
		  "                            };",
		  "",
		  "La cláusula group by especifica la propiedad según la cual se agruparán los elementos. La cláusula into crea una variable (grupo en este caso) que contendrá los resultados de la operación de agrupación.",
		  ""
		],
		"description": "ExpresionesLinQ"
	  }
	}	  


	  








/*

genmigrationadd
genmigrationupdate
*Migraciones Migrations/Data/Persistence
dotnet ef migrations add InitialCreate -p Persistence -s ProductionApi -o Data/Migrations

dotnet ef database update -p Persistence -s API

genwatchrun
*Swagger UI
dotnet watch run -p API

genpaquetes4capas
1.Creacion Proyecto 4 Capas,Crear Solucion Principal y agregar Soluciones ,
para cada implementacion API,Application,Domain,Persistence,,
Agregar referencias entre implementaciones y Finalmente descargar los,
paquetes a cada implementacion correspondiente si necesita.,
-dotnet new sln,dotnet sln add API,dotnet sln list;,
-dotnet new webapi -o API,dotnet new classlib -o Application;,
-dotnet add reference ../Application;

genconexionbd
genconexionjwt
2.Conexion Base de Datos y Conexion JWT,appsettings.json-appsettings.Development.json,
/API. 

gendbcontext
3.Crear ArchivoDbContext/Data/Persistence.

geninyeccion1
4.Agregar la primera inyeccion de ArchivoDbContext al Contenedor,
de Dependencias Program/API.

genbaseentity
generefreshtoken
generol
geneuser
geneuserrol
5.Generar Entities con Atributos,Definir RefreshToken,Rol,User,UserRol Entities/Domain.,

gencardunouno
gencardunomuchos
gencardmuchosmuchos
genrefnavegacion
gencollectnavegacion
genlistnavegacion
6.Establecer Relaciones o Cardinalidad entre Entidades Entities/Domain.

7.Definir DbSet,Definir para RefreshToken,Rol,User,UserRol en ArchivoContext/Data/Persistence.

genentityconfiguration
genhaskeyconfiguration
gentotableconfiguration
genstringpropertyconfiguration
genintpropertyconfiguration
gendatetimepropertyconfiguration
gendoublepropertyconfiguration
genuniqueconfiguration
genhasone-withoneconfiguration
genhasone-withmanyconfiguration
genhasmany-withmanyconfiguration
genclavescompuestas
gencrefreshtoken
gencrol
gencuser
8.Crear las configuraciones para cada Entidad,Definir para RefreshToken,Rol,User
EntityConfiguration/Configuration/Persistence.

genentitydto
genaddroledto
gendatauserdto
genlogindto
genregisterdto
9.Definir Dtos para mostrar valores de la Data,Definir AddRoleDto,DataUserDto,LoginDto,RegisterDto EntityDto/Dtos/API.

genmappingprofiles
10.Definir MappingProfiles para mapear y relacionar los Dtos con cada
Entidad MappingProfiles/Profiles/API.

genapplicationserviceextension
genaddjwtextensions
geninyeccion2
11.Definir Metodos de Extension e inyectar por segunda vez al
Contenedor de Dependencias ApplicationServiceExtension/Extensions/API 
, Program/API.

genigenericrepository
geniuser
genientityrepository
12.Definir Interfaces para cada Entidad,Definir IRefreshToken,IRol,IUser,Definir IGenericRepository 
IGenericRepository,IEntityRepository/Interfaces/Domain.

gengenericrepository
genuserrepository
genentityrepository
13.Definir Repositorios para cada Interface/Entidad,
Definir RefreshTokeRepository,RolRepository,UserRepository, Definir GenericRepository 
GenericRepository,EntityRepository/Repositories/Application.

genunitofwork
geniunitofwork
14.Definir IUnitOfWork y UnitOfWork IUnitOfWork/Interfaces/Domain , 
UnitOfWork/UnitOfWork/Application. ,Definir User,Rol,RefreshToken como Interfaces y Repositorios

genapplicationservices
geninyeccion3
15.Agregar Metodo de Extension,Agrega la UnitOfWork al Scope de EF
ApplicationService/Extensions/API , agregar tercera inyeccion.

genbasecontroller
genusercontroller
genentitycontroller
16.Generar Controladores,Definir UserController,Definir BaseController 
EntityController,BaseController/Controllers/API.

genpager
genparams
genjwthelpers
genauthorization
17,Generar Helpers ,Pager,Params,Jwt y Authorization ,Metodos de Paginacion y JWT Pager,Params/Helpers/API.

geniuserservice
genuserservice
18.Generar Servicios, Generar IUserService,UserService/Services/API. 
 */



